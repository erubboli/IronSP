// Generated by CoffeeScript 1.3.3
var IronConsole, IronConsoleView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

IronConsole = (function() {
  var mod, wrapExpression;

  function IronConsole(serviceUrl, options) {
    this.serviceUrl = serviceUrl;
    if (options == null) {
      options = {};
    }
    this.addToHistory = __bind(this.addToHistory, this);

    this.lastResultVariable = options['lastResultVariable'] || '_';
    this.history = [];
    this.successCallbacks = [];
    this.errorCallbacks = [];
  }

  IronConsole.prototype.execute = function(expression) {
    var wrapped,
      _this = this;
    this.addToHistory(expression);
    wrapped = wrapExpression(expression);
    return $.ajax({
      type: 'POST',
      dataType: 'text',
      data: {
        expression: wrapped
      },
      url: this.serviceUrl,
      success: function(json) {
        var cb, result, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        result = $.parseJSON(json);
        if (result["error"] == null) {
          _ref = _this.successCallbacks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            _results.push(cb(result));
          }
          return _results;
        } else {
          _ref1 = _this.errorCallbacks;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            cb = _ref1[_j];
            _results1.push(cb(result["error"]));
          }
          return _results1;
        }
      },
      error: function() {
        var args, cb, _i, _len, _ref, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = _this.errorCallbacks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          _results.push(cb.apply(null, args));
        }
        return _results;
      }
    });
  };

  IronConsole.prototype.getExpressionFromHistory = function(index) {
    return this.history[mod(index, this.history.length)];
  };

  IronConsole.prototype.onExecuteSuccess = function(callback) {
    return this.successCallbacks.push(callback);
  };

  IronConsole.prototype.onExecuteError = function(callback) {
    return this.errorCallbacks.push(callback);
  };

  IronConsole.prototype.addToHistory = function(expression) {
    var escaped;
    escaped = expression.replace(/\\n$/, '');
    return this.history.push(escaped);
  };

  wrapExpression = function(expression) {
    if (this.lastResultVariable != null) {
      return "" + this.lastResultVariable + " = (" + expression + ");" + this.lastResultVariable;
    } else {
      return expression;
    }
  };

  mod = function(n, base) {
    return ((n % base) + base) % base;
  };

  return IronConsole;

})();

IronConsoleView = (function() {

  function IronConsoleView(console, options) {
    this.console = console != null ? console : new IronConsole;
    if (options == null) {
      options = {};
    }
    this.append = __bind(this.append, this);

    this.insertTab = __bind(this.insertTab, this);

    this.registerEventHandlers = __bind(this.registerEventHandlers, this);

    this.render = __bind(this.render, this);

    this.resultPrefix = options["resultPrefix"] || '=>';
    this.inputPrefix = options["inputPrefix"] || '>>';
    this.outputPrefix = options["outputPrefix"] || '';
    this.$container = $(options["containerSelector"] || '#ironSP-console-container');
    this.consoleTemplate = $(options["consoleTemplateSelector"] || '#ironSP-console-template').html();
    this.consoleLineTemplate = $(options["consoleLineTemplateSelector"] || '#ironSP-console-line-template').html();
    this.historyIndex = 0;
    this.render();
    this.registerEventHandlers();
  }

  IronConsoleView.prototype.render = function() {
    this.$console = Mustache.render(this.consoleTemplate, {
      prompt: this.inputPrefix
    });
    return this.$container.empty().append(this.$console);
  };

  IronConsoleView.prototype.registerEventHandlers = function() {
    var _this = this;
    this.console.onExecuteSuccess(function(response) {
      if (response["output"] != null) {
        _this.append("output", _this.outputPrefix, response["output"]);
      }
      return _this.append("result", _this.resultPrefix, response["result"]);
    });
    this.console.onExecuteError(function(error) {
      return _this.append("error", '', error);
    });
    this.$input || (this.$input = $("#ironSP-console-input"));
    return this.$input.keydown(function(e) {
      var expression, handled;
      expression = _this.$input.val();
      handled = true;
      switch (e.keyCode) {
        case 13:
          if (expression === 'clear') {
            _this.clearConsole();
          } else {
            _this.append("input", _this.inputPrefix, expression);
            _this.historyIndex = 0;
            _this.clearInput();
            _this.console.execute(expression);
          }
          break;
        case 9:
          insertTab();
          break;
        case 38:
          _this.historyIndex += 1;
          _this.$input.val(_this.console.getExpressionFromHistory(_this.historyIndex));
          break;
        case 40:
          _this.historyIndex -= 1;
          _this.$input.val(_this.console.getExpressionFromHistory(_this.historyIndex));
          break;
        default:
          handled = false;
      }
      return !handled;
    });
  };

  IronConsoleView.prototype.insertTab = function() {
    return this.$input.val(this.$input.val() + "    ");
  };

  IronConsoleView.prototype.clearInput = function() {
    return this.$input.val('');
  };

  IronConsoleView.prototype.clearConsole = function() {
    this.clearInput();
    return this.$console.find(".ironSP-console-line").remove();
  };

  IronConsoleView.prototype.caretPos = function() {};

  IronConsoleView.prototype.append = function(type, prefix, text) {
    var $line, line, _i, _len, _ref, _results;
    _ref = text.replace(/[\n|\r]+/gm, '\n').split('\n');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if ((line != null ? line.trim() : void 0) !== '') {
        $line = $(Mustache.render(this.consoleLineTemplate, {
          text: line,
          type: type,
          prefix: prefix
        }));
        _results.push($(".ironSP-console-prompt").before($line));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return IronConsoleView;

})();
